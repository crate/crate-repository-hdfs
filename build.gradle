description = 'Crate HDFS Repository Plugin'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }

    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply from: "$rootDir/dist.gradle"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    provided
    hadoop1
    hadoop2
}

dependencies {
    provided("org.apache.hadoop:hadoop-client:$hadoop2Version")
    provided("io.crate:crate:$crateVersion")

    testCompile "io.crate:crate:$crateVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testCompile ("com.carrotsearch.randomizedtesting:randomizedtesting-runner:$randomizedTestingVersion") {
        exclude group: 'junit', module: 'junit'
    }

    hadoop1("org.apache.hadoop:hadoop-core:$hadoop12Version") {
        exclude group: "com.sun.jersey"
        exclude group: "org.mortbay.jetty"
        exclude group: "tomcat"
        exclude module: "hsqldb"
        exclude group: "org.eclipse.jdt"
        exclude group: "commons-beanutils"
        exclude group: "org.apache.commons"
        exclude module: "commons-cli"
        exclude module: "commons-codec"
        exclude module: "commons-logging"
    }

    hadoop2("org.apache.hadoop:hadoop-client:$hadoop2Version") {
        exclude group: "com.sun.jersey"
        exclude group: "com.sun.jersey.contribs"
        exclude group: "com.sun.jersey.jersey-test-framework"
        exclude module: "guice"
        exclude group: "org.mortbay.jetty"
        exclude group: "tomcat"
        exclude module: "commons-el"
        exclude module: "hsqldb"
        exclude group: "org.eclipse.jdt"
        exclude module: "commons-beanutils"
        exclude module: "hadoop-mapreduce-client-app"
        exclude module: "hadoop-mapreduce-client-core"
        exclude module: "hadoop-mapreduce-client-jobclient"
        exclude module: "hadoop-yarn-api"
        exclude group: "com.google.guava"
        exclude module: "commons-cli"
        exclude module: "commons-codec"
        exclude module: "commons-logging"
        exclude module: "commons-math3"
        exclude group: "log4j"
        exclude group: "org.slf4j"
        exclude group: "org.apache.httpcomponents"
        exclude group: "io.netty"
    }
    if (hadoop2Version.equals("2.7.1")) {
        hadoop2("javax.servlet:servlet-api:2.5")
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: true,
            dest: dest
    )
    return dest;
}

def extractTopfolder(File src, String trg){
    // delete target folder. Otherwise old files will stick around and lead to strange errors
    new File(trg).delete()

    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                        details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadCrateRelease << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/nightly/crate-0.52.0-201511061141-c934219.tar.gz",
            "crate-${crateVersion}.tar.gz")
    extractTopfolder(dest, 'parts/crate')
}

task deleteCrateDownloadFolder(type: Delete) {
    delete "${project.rootDir}/parts/crate"
}

task copyUpstreamSource << {
    if (!file('upstream/repository-hdfs').exists()) {
        throw new GradleException("Please run 'git submodule update --init' first")
    }
    if (!file('src/main/java').exists()) {
        copy {
            from 'upstream/repository-hdfs/src/main/java'
            into 'src/main/java'

            // un-shade guice imports
            filter { line ->
                line.replaceAll("org\\.elasticsearch\\.common\\.collect(.*)","com.google.common.collect\$1")
            }
            // make it a crate plugin
            filter { line ->
                line.replaceAll("org\\.elasticsearch\\.plugins\\.AbstractPlugin", "io.crate.plugin.AbstractPlugin")
            }
        }
    }
}

task deleteUpstreamSource(type: Delete) {
    delete "src/main/java"
}

task copyJarToClassPath {
    dependsOn jar, downloadCrateRelease, getVersion
    doLast {
        copy {
            from "build/libs/crate-repository-hdfs-${version}.jar"
            into 'parts/crate/plugins'
        }
    }
}

ext {
    downloadDir = new File(rootDir, 'downloads')
}

task copyHadoop12ToCrate(type: Copy, dependsOn: [deleteCrateDownloadFolder, downloadCrateRelease]) {
    from configurations.hadoop1
    into 'parts/crate/lib'
}

task copyHadoop2ToCrate(type: Copy, dependsOn: [deleteCrateDownloadFolder, downloadCrateRelease]) {
    from configurations.hadoop2
    into 'parts/crate/lib'
}

task printHadoop12Libraries << {
    configurations.hadoop1.each { File file -> println file.name }
}

task printHadoop2Libraries << {
    configurations.hadoop2.each { File file -> println file.name }
}

task testHadoop12(type: Test) {
    dependsOn copyHadoop12ToCrate, copyJarToClassPath
}

task testHadoop2(type: Test) {
    dependsOn copyHadoop2ToCrate, copyJarToClassPath

    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
}


clean {
    dependsOn deleteCrateDownloadFolder, deleteUpstreamSource
}

compileJava {
    dependsOn copyUpstreamSource
}

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
}


idea {
    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
